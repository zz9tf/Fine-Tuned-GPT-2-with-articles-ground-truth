#!/bin/bash

HOME_PATH="/home/zhengzheng"

function show_help {
    echo "Usage: script.sh [command] [subcommand] [options]"
    echo
    echo "Commands:"
    echo "  init [abs path]              Initialize environment with absolute path"
    echo "  gpu                          Execute nvidia-smi to list status of GPUs."
    echo "  hf login                     Login huggingface with READ token"
    echo "  hf pull [repo_name] [hf]     Pull tokenizer and model from huggingface [repo_name]. If use huggingface [hf]"
    echo "  hf env                       Manage .env for huggingface. -h for more details"
    echo "  hf ls                        Show all models cache"
    echo
    echo "Options:"
    echo "  -h, --help                  Show this help message and exit."
}

# Check for help flag
if [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
    show_help
    exit 0
fi

# Check if the first argument is "init" and the second argument is "python"
if [ "$1" == "init" ] ; then
    # Runpod
    # bash -c 'apt-get update && apt-get install vim -y && /start.sh'
    # bash -c 'apt-get update && apt-get install vim -y && cp /workspace/.bashrc ~/.bashrc && source ~/.bashrc && /start.sh'

    # Install miniconda3
    mkdir -p $2/miniconda3 &&
    wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O $2/miniconda3/miniconda.sh &&
    bash $2/miniconda3/miniconda.sh -b -u -p $2/miniconda3 &&
    rm -rf $2/miniconda3/miniconda.sh &&
    $2/miniconda3/bin/conda init bash &&
    # Install packages
    cd ../llamaIndex &&
    $2/miniconda3/bin/pip install -r requirements.txt
    # Set up dev
    echo 'export PATH=$PATH:$2/Fine-Tuned-GPT-2-with-articles-ground-truth/code/utils' >> ~/.bashrc
    cp ~/.bashrc $2
    source ~/.bashrc
    # Install gh
    $2/miniconda3/bin/conda install gh --channel conda-forge -y
    # Set up git
    git config --global user.email "zhengzheng@brandeis.edu"
    git config --global user.name "Zheng"
    
elif [ "$1" == "gpu" ]; then
    echo "Executing: nvidia-smi"
    nvidia-smi

elif [ "$1" == 'hf' ]; then
    hf_root=./hf_model
    if [ "$2" == "login" ]; then
        echo "Executing: python login_hf.py"
        hf_login="${hf_root}/login_hf.py"
        python $hf_login

    elif [ "$2" == "pull" ]; then
        COMMAND="${@:3}"
        echo "Executing: python pull_hf_model.py $COMMAND"
        pull_hf_model="${hf_root}/pull_hf_model.py"
        python $pull_hf_model $COMMAND
    elif [ "$2" == "env" ]; then
        echo "Executing: python set_save_path.py"
        set_save_path="${hf_root}/set_save_path.py"
        COMMAND="${@:3}"
        python $set_save_path $COMMAND
    elif [ "$2" == "ls" ]; then
        echo "Executing: python show_cache.py"
        show_cache="${hf_root}/show_cache.py"
        python $show_cache
    fi
else
    echo "Invalid command. Use -h or --help for usage information."
fi
